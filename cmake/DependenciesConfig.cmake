set (SCRIPT_DIR "${CMAKE_SOURCE_DIR}/cmake/")
set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

macro(configure_mpi)
  message ("Dependency check for mpi...")

  find_package(MPI)
  if(${MPI_C_FOUND})
    message(STATUS "MPI found")
  else()
    message(STATUS "MPI not found")
  endif()
endmacro(configure_mpi)

macro(configure_openmp)
  if(CMAKE_BUILD_TYPE STREQUAL "Release" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    message ("Dependency check for OpenMP")

    find_package(OpenMP)
    if(${OPENMP_FOUND})
        message(STATUS "OpenMP found")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_RELEASE} ${OpenMP_CXX_FLAGS}")
        
        include_directories(${OpenMP_CXX_INCLUDE_DIRS})
        add_definitions(-DVIENNACL_WITH_OPENMP)

        message(STATUS "OpenMP_CXX_LIB_NAMES ${OpenMP_CXX_LIB_NAMES}")
        message(STATUS "OpenMP_CXX_LIBRARY ${OpenMP_CXX_LIBRARY}")
        message(STATUS "OpenMP_CXX_LIBRARIES ${OpenMP_CXX_LIBRARIES}")
        message(STATUS "OpenMP_CXX_INCLUDE_DIRS ${OpenMP_CXX_INCLUDE_DIRS}")
        message(STATUS "OpenMP_CXX_FLAGS ${OpenMP_CXX_FLAGS}")
    else()
        message(STATUS "OpenMP not found")
    endif()
  else()
    message ("Skipped check for OpenMP (Debug/NoOpenMP build)")
    set(OPENMP_FOUND FALSE)
  endif()   
endmacro(configure_openmp)

macro(configure_eigen)
  message ("Dependency check for Eigen...")
  find_package(Eigen3 REQUIRED)
  include_directories(${EIGEN3_INCLUDE_DIR})
  message(STATUS "Eigen include dir: ${EIGEN3_INCLUDE_DIR}")
endmacro(configure_eigen)

macro(configure_viennacl)
  message ("Dependency check for ViennaCL...")
  find_package(ViennaCL REQUIRED)
  add_definitions(-DVIENNACL_WITH_EIGEN)
  include_directories(${VIENNACL_INCLUDE_DIR})
  message(STATUS "ViennaCL include dir: ${VIENNACL_INCLUDE_DIR}")
endmacro(configure_viennacl)

macro(configure_highfive)
  message ("Dependency check for HighFive...")
  SET(HIGHFIVE_USE_BOOST OFF CACHE BOOL "Disable BOOST support in HighFive")
  find_package(HighFive REQUIRED)
endmacro(configure_highfive)

macro(configure_boost)
  message ("Dependency check for boost...")
  if(${ENABLE_BOOST})
      set (Boost_USE_MULTITHREADED ON)
  
      FIND_PACKAGE(Boost COMPONENTS system program_options filesystem REQUIRED)
      message("-- Found Boost_VERSION: ${Boost_VERSION}")
      message("-- Found Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
      message("-- Found Boost_LIBRARY_DIRS: ${Boost_LIBRARY_DIRS}")
      add_definitions(-DHAVE_BOOST)
      include_directories(${Boost_INCLUDE_DIRS})
  else()
      message("-- Boost library is not enabled")
  endif()
endmacro(configure_boost)

macro(configure_python)
  find_package(pybind11 CONFIG REQUIRED)
endmacro(configure_python)