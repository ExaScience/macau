from setuptools import setup
from distutils.sysconfig import get_python_lib
import glob
import os
import sys

if os.path.exists('CMakeLists.txt'):
    print("The setup.py script should be executed from the build directory.")
    sys.exit(1)

CLASSIFIERS = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Programming Language :: Python :: 2.7",
    "Programming Language :: Python :: 3",
    "Topic :: Machine Learning",
    "Topic :: Matrix Factorization",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS"
]


prefix = None
for p in ["--prefix=", "--exec-prefix="]:
    for arg in sys.argv:
        if (arg.startswith(p)):
            prefix=arg[len(p):]

if prefix:
    so_dir = get_python_lib(plat_specific = True, standard_lib = False, prefix = prefix)
else:
    so_dir = get_python_lib()

setup(
    name = 'smurff',
    packages = [ 'smurff' ],
    version = '@SMURFF_VERSION@',
    data_files = [
        (os.path.join(so_dir, "smurff"), glob.glob('smurff/*.so')),  # unix, mac
        (os.path.join(so_dir, "smurff"), glob.glob('smurff/*.pyd')), # windows
    ],
    url = "http://github.com/ExaScience/smurff",
    zip_safe = False,
    license = "MIT",
    description = 'Bayesian Factorization Methods',
    long_description = 'Highly optimized and parallelized methods for Bayesian Factorization, including BPMF and smurff. The package uses optimized OpenMP/C++ code with a Cython wrapper to factorize large scale matrices. smurff method provides also the ability to incorporate high-dimensional side information to the factorization.',
    author = "Tom Vander Aa",
    author_email = "Tom.VanderAa@imec.be",
    classifiers = CLASSIFIERS,
    keywords = "bayesian factorization machine-learning high-dimensional side-information",
    install_requires = ['numpy', 'scipy', 'pandas']
)
